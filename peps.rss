<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>Newest Python PEPs</title>
    <link>https://peps.python.org/</link>
    <description>Newest Python Enhancement Proposals (PEPs): Information on new language features and some meta-information like release procedure and schedules.</description>
    <atom:link href="https://peps.python.org/peps.rss" rel="self"/>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    <language>en</language>
    <lastBuildDate>Sun, 26 Jan 2025 21:10:12 GMT</lastBuildDate>
    <item>
      <title>PEP 773: A Python Installation Manager for Windows</title>
      <link>https://peps.python.org/pep-0773/</link>
      <description>Installation of the python.org Python distribution on Windows is complex. There are three main approaches with roughly equivalent levels of user experience, and yet all of these suffer from different limitations, including failing to satisfy modern usage scenarios. This PEP proposes a design for a single Windows install workflow tool that satisfies all the needs of the existing installers for the platform, while avoiding most of their limitations, and provides the core team with the ability to manage releases for many years to come.</description>
      <author>Steve Dower</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0773/</guid>
      <pubDate>Tue, 21 Jan 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 771: Default Extras for Python Software Packages</title>
      <link>https://peps.python.org/pep-0771/</link>
      <description>PEP 508 specifies a mini-language for declaring package dependencies. One feature of this language is the ability to specify extras, which are optional components of a distribution that, when used, install additional dependencies. This PEP proposes a mechanism to allow one or more extras to be installed by default if none are provided explicitly.</description>
      <author>Thomas Robitaille (thomas.robitaille@gmail.com), Jonathan Dekhtiar (jonathan@dekhtiar.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0771/</guid>
      <pubDate>Mon, 13 Jan 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 770: Improving measurability of Python packages with Software Bill-of-Materials</title>
      <link>https://peps.python.org/pep-0770/</link>
      <description>Software Bill-of-Materials (SBOM) is a technology-and-ecosystem-agnostic method for describing software composition, provenance, heritage, and more. SBOMs are used as inputs for software composition analysis (SCA) tools, such as scanners for vulnerabilities and licenses, and have been gaining traction in global software regulations and frameworks.</description>
      <author>Seth Larson (seth@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0770/</guid>
      <pubDate>Thu, 02 Jan 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 769: Add a 'default' keyword argument to 'attrgetter', 'itemgetter' and 'getitem'</title>
      <link>https://peps.python.org/pep-0769/</link>
      <description>This proposal aims to enhance the operator module by adding a default keyword argument to the attrgetter, itemgetter and getitem functions. This addition would allow these functions to return a specified default value when the targeted attribute or item is missing, thereby preventing exceptions and simplifying code that handles optional attributes or items.</description>
      <author>Facundo Batista (facundo@taniquetil.com.ar)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0769/</guid>
      <pubDate>Sun, 22 Dec 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 768: Safe external debugger interface for CPython</title>
      <link>https://peps.python.org/pep-0768/</link>
      <description>This PEP proposes adding a zero-overhead debugging interface to CPython that allows debuggers and profilers to safely attach to running Python processes. The interface provides safe execution points for attaching debugger code without modifying the interpreter’s normal execution path or adding runtime overhead.</description>
      <author>Pablo Galindo Salgado (pablogsal@python.org), Matt Wozniski (godlygeek@gmail.com), Ivona Stojanovic (stojanovic.i@hotmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0768/</guid>
      <pubDate>Mon, 25 Nov 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 767: Annotating Read-Only Attributes</title>
      <link>https://peps.python.org/pep-0767/</link>
      <description>PEP 705 introduced the typing.ReadOnly type qualifier to allow defining read-only typing.TypedDict items.</description>
      <author>Eneg (eneg at discuss.python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0767/</guid>
      <pubDate>Mon, 18 Nov 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 766: Explicit Priority Choices Among Multiple Indexes</title>
      <link>https://peps.python.org/pep-0766/</link>
      <description>Package resolution is a key part of the Python user experience as the means of extending Python’s core functionality. The experience of package resolution is mostly taken for granted until someone encounters a situation where the package installer does something they don’t expect.  The installer behavior with multiple indexes has been a common source of unexpected behavior.  Through its ubiquity, pip has long defined the standard expected behavior across other tools in the ecosystem, but Python installers are diverging with respect to how they handle multiple indexes. At the core of this divergence is whether index contents are combined before resolving distributions, or each index is handled individually in order. pip merges all indexes before matching distributions, while uv matches distributions on one index before moving on to the next. Each approach has advantages and disadvantages.  This PEP aims to describe each of these behaviors, which are referred to as “version priority” and “index priority” respectively, so that community discussions and troubleshooting can share a common vocabulary, and so that tools can implement predictable behavior based on these descriptions.</description>
      <author>Michael Sarahan (msarahan@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0766/</guid>
      <pubDate>Mon, 18 Nov 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 765: Disallow return/break/continue that exit a finally block</title>
      <link>https://peps.python.org/pep-0765/</link>
      <description>This PEP proposes to withdraw support for return, break and continue statements that break out of a finally block. This was proposed in the past by PEP 601. The current PEP is based on empirical evidence regarding the cost/benefit of this change, which did not exist at the time that PEP 601 was rejected. It also proposes a slightly different solution than that which was proposed by PEP 601.</description>
      <author>Irit Katriel (irit@python.org), Alyssa Coghlan (ncoghlan@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0765/</guid>
      <pubDate>Fri, 15 Nov 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 763: Limiting deletions on PyPI</title>
      <link>https://peps.python.org/pep-0763/</link>
      <description>We propose limiting when users can delete files, releases, and projects from PyPI. A project, release, or file may only be deleted within 72 hours of when it is uploaded to the index. From this point, users may only use the “yank” mechanism specified by PEP 592.</description>
      <author>William Woodruff (william@yossarian.net), Alexis Challande (alexis.challande@trailofbits.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0763/</guid>
      <pubDate>Thu, 24 Oct 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 8106: 2025 Term Steering Council election</title>
      <link>https://peps.python.org/pep-8106/</link>
      <description>This document describes the schedule and other details of the 2024 election for the Python steering council, as specified in PEP 13. This is the steering council election for the 2025 term (i.e. Python 3.14).</description>
      <author>Ee Durbin (ee@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-8106/</guid>
      <pubDate>Mon, 21 Oct 2024 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>
